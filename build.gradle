//file:noinspection GrDeprecatedAPIUsage
import com.modrinth.minotaur.dependencies.ModDependency
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id "fabric-loom" version "1.9.2"
	id "org.jetbrains.kotlin.plugin.serialization" version "2.1.0"
	id "org.jetbrains.kotlin.jvm" version "2.1.0"
	id "com.github.node-gradle.node" version "7.1.0"
	id "com.modrinth.minotaur" version "2.+"
	id "maven-publish"
}

version = project.mod_version
group = project.maven_group

archives_base_name = "${project.archives_base_name}-${project.minecraft_version}"

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}


modrinth {
	token = project.hasProperty("modrinthToken") ? project.modrinthToken : System.getenv("MODRINTH_TOKEN")
	projectId = project.id_main
	versionNumber = project.mod_version
	versionName = "IWTCMS ${project.mod_version}"
	uploadFile = remapJar
	//additionalFiles = [remapSourcesJar]
	gameVersions = Eval.me(project.release_minecraft_versions)
	versionType = project.release_type
	loaders = ["fabric"]
	syncBodyFrom = rootProject.file("README.md").text
	changelog = rootProject.file("CHANGELOG.md").text
	dependencies = [
			new ModDependency(project.id_fabric_api, "required"),
			new ModDependency(project.id_fabric_kotlin, "required"),
			new ModDependency(project.id_spark, "optional")
	]

	tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// Ktor cool thing, but launching with fabricmc looks terrible
    implementation include("io.ktor:ktor-server-core:${project.ktor_version}")
    implementation include("io.ktor:ktor-server-netty:${project.ktor_version}")
	implementation include("io.ktor:ktor-network-tls-certificates:${project.ktor_version}")
	implementation include("io.ktor:ktor-server-websockets:${project.ktor_version}")
	implementation include("io.ktor:ktor-server-sessions:${project.ktor_version}")
	implementation include("io.ktor:ktor-serialization-kotlinx-json:${project.ktor_version}")
	implementation include("io.ktor:ktor-server-content-negotiation:${project.ktor_version}")
	implementation include("io.ktor:ktor-server-status-pages:$ktor_version")
	include "io.ktor:ktor-events:${project.ktor_version}"
	include "io.ktor:ktor-utils:${project.ktor_version}"
	include "io.ktor:ktor-network-tls:${project.ktor_version}"
	include "io.ktor:ktor-io:${project.ktor_version}"
	include "io.ktor:ktor-http:${project.ktor_version}" // fuck this
	include "io.ktor:ktor-websockets:${project.ktor_version}"
	include "io.ktor:ktor-serialization:${project.ktor_version}"
	include "io.ktor:ktor-serialization-kotlinx:${project.ktor_version}"

	include "io.netty:netty-transport-classes-kqueue:${project.netty_version}"
	include "io.netty:netty-codec-http2:${project.netty_version}"
	include "io.netty:netty-codec-http:${project.netty_version}"
	// already launched ktor

	implementation include("com.typesafe:config:${project.hocon_config_version}")

	implementation include("commons-codec:commons-codec:${project.commons_codec}")

	modImplementation "me.lucko:spark-api:${project.spark_api_version}"
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

tasks.register("generatePythonRequirements") {

	doFirst {
		file("$buildDir/python").delete()

		if (System.getProperty("os.name").toLowerCase().contains("win")) {
			exec {
				commandLine 'cmd', '/c', 'genpyreqs.bat'
			}
		} else {
			exec {
				commandLine 'bash', 'genpyreqs.sh'
			}
		}
	}

	doLast {
		println("generated requirements.txt")
	}
}

tasks.register("preparePythonClient") {
	group = "build"

	dependsOn tasks.generatePythonRequirements

	def clientDir = file("src/main/python")
	def pyBuildDir = file("$buildDir/python")
	def outputZip = file("$buildDir/resources/main/web/iwtcms_client.zip")

	copy {
		from(clientDir)
		into(pyBuildDir)
	}

	inputs.dir(pyBuildDir)
	outputs.file(outputZip)

	doLast {
		ant.zip(destfile: outputZip, basedir: pyBuildDir)
		println("Python client files have been archived as: $outputZip")
	}
}

tasks.register("compileWeb", NpxTask) {
	dependsOn tasks.npmInstall

	command = "tsc"

	copy {
		from(file("src/main/web"))
		into(file("$buildDir/resources/main/web"))
	}
}

jar {
	from("LICENSE")
}

processResources {
	dependsOn tasks.preparePythonClient
	dependsOn tasks.compileWeb

	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			groupId = project.maven_group
			version = version
			//noinspection GroovyAssignabilityCheck
			from components.java
		}
	}

	repositories {
		maven {
			name = "Lumivoid"
			url = "https://maven.lumivoid.pp.ua/repository/lumivoid/"

			credentials {
				username = project.hasProperty("mavenUsername") ? project.mavenUsername : System.getenv("MAVEN_USERNAME")
				password = project.hasProperty("mavenPassword") ? project.mavenPassword : System.getenv("MAVEN_PASSWORD")
			}
		}
	}
}